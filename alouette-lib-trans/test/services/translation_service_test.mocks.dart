// Mocks generated by Mockito 5.4.6 from annotations
// in alouette_lib_trans/test/services/translation_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:alouette_lib_trans/src/models/connection_status.dart' as _i2;
import 'package:alouette_lib_trans/src/models/llm_config.dart' as _i6;
import 'package:alouette_lib_trans/src/providers/translation_provider.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConnectionStatus_0 extends _i1.SmartFake
    implements _i2.ConnectionStatus {
  _FakeConnectionStatus_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TranslationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockTranslationProvider extends _i1.Mock
    implements _i3.TranslationProvider {
  MockTranslationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get providerName =>
      (super.noSuchMethod(
            Invocation.getter(#providerName),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#providerName),
            ),
          )
          as String);

  @override
  _i5.Future<String> translateText({
    required String? text,
    required String? targetLanguage,
    required _i6.LLMConfig? config,
    Map<String, dynamic>? additionalParams,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#translateText, [], {
              #text: text,
              #targetLanguage: targetLanguage,
              #config: config,
              #additionalParams: additionalParams,
            }),
            returnValue: _i5.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#translateText, [], {
                  #text: text,
                  #targetLanguage: targetLanguage,
                  #config: config,
                  #additionalParams: additionalParams,
                }),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<_i2.ConnectionStatus> testConnection(_i6.LLMConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#testConnection, [config]),
            returnValue: _i5.Future<_i2.ConnectionStatus>.value(
              _FakeConnectionStatus_0(
                this,
                Invocation.method(#testConnection, [config]),
              ),
            ),
          )
          as _i5.Future<_i2.ConnectionStatus>);

  @override
  _i5.Future<List<String>> getAvailableModels(_i6.LLMConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableModels, [config]),
            returnValue: _i5.Future<List<String>>.value(<String>[]),
          )
          as _i5.Future<List<String>>);

  @override
  bool supportsConfig(_i6.LLMConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#supportsConfig, [config]),
            returnValue: false,
          )
          as bool);

  @override
  String getSystemPrompt(String? targetLanguage) =>
      (super.noSuchMethod(
            Invocation.method(#getSystemPrompt, [targetLanguage]),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.method(#getSystemPrompt, [targetLanguage]),
            ),
          )
          as String);

  @override
  String getExplicitLanguageSpec(String? targetLang) =>
      (super.noSuchMethod(
            Invocation.method(#getExplicitLanguageSpec, [targetLang]),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.method(#getExplicitLanguageSpec, [targetLang]),
            ),
          )
          as String);
}
